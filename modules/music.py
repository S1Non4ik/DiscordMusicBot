import disnake
from disnake.ext import commands
from disnake import FFmpegPCMAudio
from cfg.cfg import *
import asyncio
import yt_dlp
import time

queues = {}
voice_clients = {}

yt_dl_options = {
    "format": "bestaudio/best",
    "extract_flat": "in_playlist",
    "no_cache": True,
    "socket_timeout": 15,
    "cookiefile": "cookies.txt",
    "ignoreerrors": True,
    "age_limit": 18,
    "http_headers": {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "Accept-Language": "en-US,en;q=0.9"
    }
}

ytdl = yt_dlp.YoutubeDL(yt_dl_options)

ffmpeg_options = {
    'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5 -nostdin',
    'options': '-vn -filter:a "volume=0.25"'
}



class Music(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.bot.loop.create_task(self.clean_old_entries())
        print('–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')

    async def clean_old_entries(self):
        while True:
            await asyncio.sleep(3600)
            for guild_id in list(queues.keys()):
                queues[guild_id] = [t for t in queues[guild_id] if time.time() - t['added_at'] < 1800]

    @commands.slash_command(guild_ids=[guild], description='–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç')
    async def play(self, inter: disnake.ApplicationCommandInteraction, query: str):
        try:
            if not inter.author.voice:
                return await inter.response.send_message("üîá –í—ã –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!", ephemeral=True)

            if inter.guild.id not in voice_clients:
                voice_client = await inter.author.voice.channel.connect()
                voice_clients[inter.guild.id] = voice_client
                await inter.response.send_message(f"üîä –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ {inter.author.voice.channel.mention}")
            else:
                await inter.response.defer()
                voice_client = voice_clients[inter.guild.id]

            if inter.guild.id not in queues:
                queues[inter.guild.id] = []

            data = self.extract_info(query)

            if 'entries' in data:
                playlist_title = data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç')
                track_titles = [entry.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫') for entry in data['entries']]
                queues[inter.guild.id].append({
                    'url': query,
                    'title': f"–ü–ª–µ–π–ª–∏—Å—Ç - {playlist_title}",
                    'tracks': track_titles,
                    'added_at': time.time()
                })
                await inter.followup.send(f"üé∂ –î–æ–±–∞–≤–ª–µ–Ω {playlist_title} —Å —Ç—Ä–µ–∫–∞–º–∏: {', '.join(track_titles)}")
            else:  # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ç—Ä–µ–∫
                track_title = data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
                queues[inter.guild.id].append({
                    'url': query,
                    'title': track_title,
                    'added_at': time.time()
                })
                await inter.followup.send(f"üé∂ –î–æ–±–∞–≤–ª–µ–Ω —Ç—Ä–µ–∫: {track_title}")

            await self.show_queue(inter)

            if len(queues[inter.guild.id]) == 1:
                await self.play_next(inter.guild.id)

        except Exception as e:
            await inter.followup.send(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            print(f"Play error: {e}")

    async def show_queue(self, inter: disnake.ApplicationCommandInteraction):
        queue = queues.get(inter.guild.id, [])
        if not queue:
            await inter.followup.send("üé∂ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
            return

        queue_message = "üé∂ –¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å:\n"
        for idx, track in enumerate(queue):
            if 'tracks' in track:  # –ï—Å–ª–∏ —ç—Ç–æ –ø–ª–µ–π–ª–∏—Å—Ç
                queue_message += f"{idx + 1}. {track['title']} - –¢—Ä–µ–∫–∏: {', '.join(track['tracks'])}\n"
            else:  # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ç—Ä–µ–∫
                queue_message += f"{idx + 1}. {track['title']}\n"

        await inter.followup.send(queue_message)

    async def play_next(self, guild_id, retries=3):
        if not queues.get(guild_id) or not voice_clients.get(guild_id):
            return

        try:
            track = queues[guild_id][0]
            loop = asyncio.get_event_loop()

            data = await loop.run_in_executor(None, self.extract_info, track['url'])

            if 'entries' in data:
                entries = list(data['entries'])
                if not entries:
                    raise Exception("–ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç")

                queues[guild_id].pop(0)

                for entry in reversed(entries):
                    if entry and entry.get('url'):
                        queues[guild_id].insert(0, {
                            'url': entry['url'],
                            'title': entry.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫'),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
                            'added_at': time.time()
                        })

                await self.play_next(guild_id)
                return

            if 'url' not in data:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL —Ç—Ä–µ–∫–∞")

            url = data['url']
            headers = data.get('http_headers', {})

            headers_str = "\r\n".join([f"{k}: {v}" for k, v in headers.items()])
            current_ffmpeg_options = {
                'before_options': ffmpeg_options['before_options'],
                'options': f'{ffmpeg_options["options"]} -headers "{headers_str}"'
            }

            player = FFmpegPCMAudio(url, **current_ffmpeg_options)

            voice_clients[guild_id].play(
                player,
                after=lambda e: self.bot.loop.create_task(self.song_finished(guild_id))
            )

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
            if retries > 0:
                await asyncio.sleep(2)
                await self.play_next(guild_id, retries - 1)
            else:
                await self.force_skip(guild_id)

    def extract_info(self, url):
        return ytdl.extract_info(
            url,
            download=False,
            process=True,
            extra_info={'extract_flat': True}
        )

    async def song_finished(self, guild_id):
        try:
            if queues.get(guild_id) and len(queues[guild_id]) > 0:
                queues[guild_id].pop(0)

            if queues.get(guild_id) and len(queues[guild_id]) > 0:
                await self.play_next(guild_id)
            else:
                await self.stop_voice(guild_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–∫–∞: {e}")

    async def force_skip(self, guild_id):
        try:
            if queues.get(guild_id) and len(queues[guild_id]) > 0:
                queues[guild_id].pop(0)
                if queues[guild_id]:
                    await self.play_next(guild_id)
                else:
                    await self.stop_voice(guild_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞: {e}")

    async def stop_voice(self, guild_id):
        try:
            if guild_id in voice_clients:
                client = voice_clients[guild_id]
                if client.is_connected():
                    await client.disconnect()
                del voice_clients[guild_id]
        except KeyError:
            pass
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {e}")

        try:
            if guild_id in queues:
                del queues[guild_id]
        except KeyError:
            pass

    @commands.slash_command(guild_ids=[guild], description='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫')
    async def skip(self, inter: disnake.ApplicationCommandInteraction):
        try:
            if inter.guild.id in voice_clients:
                voice_clients[inter.guild.id].stop()
                await inter.response.send_message("‚è≠Ô∏è –¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω")
            else:
                await inter.response.send_message("‚ùå –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", ephemeral=True)
        except Exception as e:
            await inter.response.send_message(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            print(f"Skip error: {e}")

    @commands.slash_command(guild_ids=[guild], description='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ')
    async def stop(self, inter: disnake.ApplicationCommandInteraction):
        try:
            await self.stop_voice(inter.guild.id)
            await inter.response.send_message("‚èπÔ∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            await inter.response.send_message(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
            print(f"Stop error: {e}")


def setup(bot: commands.Bot):
    bot.add_cog(Music(bot))
